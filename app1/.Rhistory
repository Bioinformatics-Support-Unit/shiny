par( mfrow = c( 3, 2 ) )
i <- 1
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
i <- 1
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
dev.off()
dev.off()
pdf("variance.pdf")
par( mfrow = c( 3, 2 ) )
i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
i <- 4
plot(x=c(1:16), y=(fooA[i,]), main=paste("HMOX1 ", rownames(fooA)[i]))
lines(x=c(1:16), y=(fooA[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(fooA[i,]), main=paste("HMOX1 ", rownames(fooA)[i]))
lines(x=c(1:16), y=log2(fooA[i,]))
abline(v = 6.5)
i <- 1
plot(x=c(1:16), y=log2(fooB[i,]), main=paste("PDCL3P4 ", rownames(fooB)[i]))
lines(x=c(1:16), y=log2(fooB[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=(fooB[i,]), main=paste("PDCL3P4 ", rownames(fooB)[i]))
lines(x=c(1:16), y=(fooB[i,]))
abline(v = 6.5)
dev.off()
pdf("variance.pdf")
par( mfrow = c( 2, 2 ) )
i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
i <- 4
plot(x=c(1:16), y=(fooA[i,]), main=paste("HMOX1 ", rownames(fooA)[i]))
lines(x=c(1:16), y=(fooA[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(fooA[i,]), main=paste("HMOX1 ", rownames(fooA)[i]))
lines(x=c(1:16), y=log2(fooA[i,]))
abline(v = 6.5)
#   i <- 1
#   plot(x=c(1:16), y=log2(fooB[i,]), main=paste("PDCL3P4 ", rownames(fooB)[i]))
#   lines(x=c(1:16), y=log2(fooB[i,]))
#   abline(v = 6.5)
#   plot(x=c(1:16), y=(fooB[i,]), main=paste("PDCL3P4 ", rownames(fooB)[i]))
#   lines(x=c(1:16), y=(fooB[i,]))
#   abline(v = 6.5)
dev.off()
foo
pdf("COL2A1")
par( mfrow = c( 11, 2 ) )
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
#   readkey()
}
dev.off()
dev.off()
pdf("COL2A1")
par( mfrow = c( 4, 2 ) )
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
#   readkey()
}
dev.off()
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
readkey()
}
foo
pdf("COL2A1")
par( mfrow = c( 4, 2 ) )
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
#   if
#   plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
#   lines(x=c(1:16), y=log2(foo[i,]))
#   abline(v = 6.5)
#    readkey()
}
dev.off()
pdf("COL2A1.pdf")
par( mfrow = c( 4, 2 ) )
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
#   if
#   plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
#   lines(x=c(1:16), y=log2(foo[i,]))
#   abline(v = 6.5)
#    readkey()
}
dev.off()
pdf("COL2A1.pdf")
par( mfrow = c( 2, 2 ) )
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
#   if
#   plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
#   lines(x=c(1:16), y=log2(foo[i,]))
#   abline(v = 6.5)
#    readkey()
}
dev.off()
pdf("variance.pdf")
par( mfrow = c( 2, 2 ) )
i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]), col=2)
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
i <- 4
plot(x=c(1:16), y=(fooA[i,]), main=paste("HMOX1 ", rownames(fooA)[i]), col=2)
lines(x=c(1:16), y=(fooA[i,]))
abline(v = 6.5)
plot(x=c(1:16), y=log2(fooA[i,]), main=paste("HMOX1 ", rownames(fooA)[i]))
lines(x=c(1:16), y=log2(fooA[i,]))
abline(v = 6.5)
#   i <- 1
#   plot(x=c(1:16), y=log2(fooB[i,]), main=paste("PDCL3P4 ", rownames(fooB)[i]))
#   lines(x=c(1:16), y=log2(fooB[i,]))
#   abline(v = 6.5)
#   plot(x=c(1:16), y=(fooB[i,]), main=paste("PDCL3P4 ", rownames(fooB)[i]))
#   lines(x=c(1:16), y=(fooB[i,]))
#   abline(v = 6.5)
dev.off()
pdf("COL2A1.pdf")
par( mfrow = c( 2, 2 ) )
for(i in 1:length(rownames(foo)))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]), col=2)
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
#   if
#   plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
#   lines(x=c(1:16), y=log2(foo[i,]))
#   abline(v = 6.5)
#    readkey()
}
dev.off()
pdf("COL2A1.pdf")
par( mfrow = c( 2, 2 ) )
#for(i in 1:length(rownames(foo)))
for(i in c(1,2,3,5,6,7,8,9,10,11))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]), col=2)
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
#   if
#   plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
#   lines(x=c(1:16), y=log2(foo[i,]))
#   abline(v = 6.5)
#    readkey()
}
dev.off()
pdf("COL2A1.pdf")
par( mfrow = c( 2, 2 ) )
#for(i in 1:length(rownames(foo)))
for(i in c(1,2,3,5,6,7,8,9,10,11))
{
#   i <- 1
plot(x=c(1:16), y=(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]), col=2)
lines(x=c(1:16), y=(foo[i,]))
abline(v = 6.5)
#   if
plot(x=c(1:16), y=log2(foo[i,]), main=paste("COL2A1 ", rownames(foo)[i]))
lines(x=c(1:16), y=log2(foo[i,]))
abline(v = 6.5)
#    readkey()
}
dev.off()
cor(foo[1,])
cor(foo)
cor(t(foo))
heatmap(cor(t(foo)))
blah <- cor(t(foo))
blah[blah == NA]
blah[blah = NA]
blah[blah  NA]
blah[is.na(blah)]
blah[is.na(blah)] <- 0
heatmap(blah)
cor.test(t(foo))
library(affycoretools)
setwd("~/Documents/Bioinformatics/Customers/Jess/May_2014_Exiqon_miRNA_Microarray/Raw_Data/Array_2/")
list.files()
10/100
0.1*5
ceiling(0.5)
floor(0.5)
runApp('.')
setwd("~/Documents/Bioinformatics/Web/Shiny/app1/)
""
)
setwd("~/Documents/Bioinformatics/Web/Shiny/app1/")
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
load("test.Rdata")
runApp('.')
runApp('.')
runApp('.')
runApp('.')
first <- 1
last <- 100
enable <- TRUE
p      <- plot_profile(df[first:last,],
treatments=treatment,
sep=enable)
df <- foo
df <- foo
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
plot_profile(obatch, treatment, TRUE)
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
df <- obatch
range  <<- length(df[,1])
range_ <<- length(df[,1])
range_
first_ <<- ceiling((range/100) * 1)
first_ <<- ceiling((range_/100) * 1)
first_ <<- ceiling((range_/100) * 20)
runApp('.')
runApp('.')
runApp('.')
runApp('.')
list.files()
runApp('.')
runApp('.')
runApp('.')
list.files()
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
data_ <- list()
data_[[1]] <- obatch
data_[[2]] <- eset.spike
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
runApp('.')
data_names <- c('Raw Data', 'Normalised Data - Pre QC')
i<- 1
condition = paste("input.dataset == ", data_names[i], sep='')
condition
condition = paste("input.dataset == '", data_names[i], "'", sep='')
condition
runApp('.')
runApp('.')
runApp('.')
runApp('.')
data_in <- list()
data_[[1]] <- obatch
data_[[2]] <- eset.spike
treatment_in <- list()
treatment_in[[1]] <- treatment
treatment_in[[2]] <- treatment
data_names <- c('Raw Data', 'Normalised Data - Pre QC')
paste(data_names[1])
runApp('.')
runApp('.')
runApp('.')
foo <- data_in[[1]]
data_in <- list()
data_[[1]] <- obatch
data_[[2]] <- eset.spike
data_in <- list()
data_[1] <- obatch
data_[2] <- eset.spike
runApp('.')
input$dataset
input$dataset <- "Raw Data"
input <- "Raw Data"
for(i in 1:length(data_in[[i]])) {
if(input == data_names[i]) {
df        <- data_in[[i]]
treatmentz <- treatment_in[[i]]
}
}
data_names[i]
length(data_in)
input
data_names[1]
for(i in 1:length(data_in[[i]])) {
print(data_names[i])
print(input)
if(input == data_names[i]) {
df        <- data_in[[i]]
treatmentz <- treatment_in[[i]]
}
}
for(i in 1:length(data_in[[i]])) {
print(data_names[i])
print(input)
if(input == data_names[i]) {
df        <- data_in[[i]]
treatmentz <- treatment_in[[i]]
}
}
for(i in 1:length(data_in) {
print(data_names[i])
print(input)
if(input == data_names[i]) {
df        <- data_in[[i]]
treatmentz <- treatment_in[[i]]
}
}
for(i in 1:length(data_in)) {
print(data_names[i])
print(input)
if(input == data_names[i]) {
df        <- data_in[[i]]
treatmentz <- treatment_in[[i]]
}
}
runApp('.')
plotPCA(eset.spike)
eset.spike[1,]
plot(princomp(eset.spike))
princomp(eset.spike)
install.packages("ggvis")
install_github(c(rstudio/ggvis"))
)
,
install_github("rstudio/ggvis")
install_github(c("hadley/testthat", "rstudio/shiny", "rstudio/ggvis"))
devtools::install_github(c("rstudio/rmarkdown", "rstudio/shiny", "rstudio/ggvis"),
build_vignettes = FALSE)
mtcars %>% ggvis(~mpg, ~wt) %>% layer_points()
library(ggvis)
library('ggvis')
devtools::install_github("rstudio/ggvis",
build_vignettes = FALSE)
?ggvis()
?ggvis
??ggvis
ggvis
pairs(mtcars, main = "mtcars data")
mtcars
library(ggvis)
# Basic scatter plot
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points()
# Variable transformations
mtcars %>% ggvis(x = ~wt, y = ~wt/mpg) %>% layer_points()
mtcars %>% ggvis(x = ~factor(cyl), y = ~mpg) %>% layer_points()
# With colour
# continuous:
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points()
# and discrete:
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl)) %>%
layer_points()
# Use unscaled constant: 10 refers to 10 pixels from top
mtcars %>% ggvis(x = ~wt) %>%
layer_points(y = ~mpg) %>%
layer_points(y := 10, fill := "red")
# Use scaled constant: 10 refers to data space
mtcars %>% ggvis(x = ~wt) %>%
layer_points(y = ~mpg) %>%
layer_points(y = 10, fill := "red")
# Line and point graph
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_lines() %>%
layer_points(fill := "red")
# Two marks
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_points(fill := "red", size := 25)
# Two marks at different levels of the tree, with different mappings for a
# variable
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_points(fill := "red", y = ~qsec, size := 25)
# Two y scales
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_points(fill := "red", prop("y", ~qsec, scale = "yq"))
# Two separate data sets, equal in the tree
mtc1 <- mtcars[1:10, ]
mtc2 <- mtcars[11:20, ]
ggvis(NULL, x = ~wt, y = ~mpg) %>%
layer_points(stroke := "black", fill := "black", data = mtc1) %>%
layer_points(fill := "red", size := 40, data = mtc2)
# Scatter plot with one set of points with `cyl` mapped to stroke,
# and another set with `am` mapped to fill
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>%
layer_points(stroke = ~factor(cyl), fill := NA) %>%
layer_points(fill = ~factor(am), size := 25)
# Same as previous, but also with (useless) grouping in the layers
mtcars %>% group_by(cyl) %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points(stroke = ~factor(cyl), fill := NA) %>%
layer_points(fill = ~factor(am), size := 25)
# Use expression in a prop
pressure %>% ggvis(x = ~temperature, y = ~log(pressure)) %>% layer_points()
# Use variable from the calling environment
y_min <- min(log(pressure$pressure))
pressure %>% ggvis(x = ~temperature, y = ~log(pressure) - y_min) %>%
layer_points()
library(ggvis)
library(dplyr)
library(ggvis)
library(dplyr)
library(ggvis)
library(dplyr)
