# treatments       <- c("Co", "Ly", "Sj")
# array_names      <- treatment_s
design           <- model.matrix(~0 + factor(array_names, levels = treatments))
colnames(design) <- treatments
num_parameters   <- ncol(design)
#cont_mat <- makeContrasts(Co-Ly, Co-Hi, Hi-Ly, levels=treatments)
# cont_mat <- makeContrasts(Co-Sj, Ly-Sj,  levels=treatments)
cont_mat <- makeContrasts(Co-Ly, Co-Hi, Co-Lo, Hi-Ly, Ly-Lo, Hi-Lo, levels=treatments)
idx <- order(ndata$genes$Gene)
idx <- order(ndata.quantile$genes$Gene)
idx      <- order(ndata.quantile$genes$Name)
ndata    <- ndata.quantile[idx,]
idx.rm   <- which(ndata$genes$probe.type=="Control")
idx.rm   <- which(ndata$genes$probe.type=="Spike")
ndata    <- ndata[-idx.rm,]
corfit   <- duplicateCorrelation(ndata, design, ndups=4,
weights=ndata$weights)
fit      <- lmFit(ndata, design, ndups=4, correlation=corfit$consensus)
fit2     <- contrasts.fit(fit, contrasts=cont_mat)
fit2     <- eBayes(fit2)
comparisons <- c("Co - Ly", "Co - Hi", "Co - Lo", "Hi - Ly", "Hi - Lo", "Ly - Lo")
# comparisons <- c("Co - Sj", "Ly - Sj")
p_cut_off   <- 0.05
fold_change <- 1.2
i           <- 1
comparisons <- c("Co - Ly", "Co - Hi", "Co - Lo", "Hi - Ly", "Hi - Lo", "Ly - Lo")
# comparisons <- c("Co - Sj", "Ly - Sj")
p_cut_off   <- 0.05
fold_change <- 1.2
i           <- 1
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
dev.off()
dev.off()
print(g)
i           <- 2
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
i           <- 3
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
i           <- 4
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
i           <- 5
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
i           <- 6
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
gene_list_unfiltered$adj.P.Val < p_cut_off)
g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
y=-log10(gene_list_unfiltered$adj.P.Val),
colour=gene_list_unfiltered$threshold)) +
geom_point(alpha=0.4, size=1.75) +
theme(legend.position = "none") +
#xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
print(g)
cat ("Press [enter] to continue")
line <- readline()
}
require(ggplot2)
gg_volcano = function(unfiltered_toptable, afc=2, pval=0.05) {
# this function takes the unfiltered results of topTable (limma), and plots a
# ggplot2 Volcano Plot. Optional arguments are an absolute fold change and adj
# p-Value cutoff.
# add a pass/fail column, based on the afc and pval cutoffs
unfiltered_toptable$pass = unfiltered_toptable$adj.P.Val < pval & abs(unfiltered_toptable$logFC) > log2(afc)
# plot basics - x axis is lfc, y axis is -log10(pVal)
g = ggplot(unfiltered_toptable, aes(x=logFC, y=-log(adj.P.Val, 10)))
# add points and delimiter lines, colour according to pass/fail criteria
g + geom_point(aes(colour=pass), show_guide=F) + scale_colour_manual(values=c(alpha('black', 0.5), 'red')) +
geom_hline(yintercept=-log(pval, 10), colour="red", linetype=2) +
geom_vline(xintercept=-log2(afc), colour="red", linetype=2) +
geom_vline(xintercept=log2(afc), colour="red", linetype=2) +
theme_bw()
}
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
gg_volcano(gene_list_unfiltered)
cat ("Press [enter] to continue")
line <- readline()
}
gg_volcano(gene_list_unfiltered)
require(scales)
gg_volcano(gene_list_unfiltered)
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
gg_volcano(gene_list_unfiltered)
cat ("Press [enter] to continue")
line <- readline()
}
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
i           <- 1
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list
gg_volcano = function(unfiltered_toptable, afc=1.2, pval=0.05) {
# this function takes the unfiltered results of topTable (limma), and plots a
# ggplot2 Volcano Plot. Optional arguments are an absolute fold change and adj
# p-Value cutoff.
# add a pass/fail column, based on the afc and pval cutoffs
unfiltered_toptable$pass = unfiltered_toptable$adj.P.Val < pval & abs(unfiltered_toptable$logFC) > log2(afc)
# plot basics - x axis is lfc, y axis is -log10(pVal)
g = ggplot(unfiltered_toptable, aes(x=logFC, y=-log(adj.P.Val, 10)))
# add points and delimiter lines, colour according to pass/fail criteria
g + geom_point(aes(colour=pass), show_guide=F) + scale_colour_manual(values=c(alpha('black', 0.5), 'red')) +
geom_hline(yintercept=-log(pval, 10), colour="red", linetype=2) +
geom_vline(xintercept=-log2(afc), colour="red", linetype=2) +
geom_vline(xintercept=log2(afc), colour="red", linetype=2) +
theme_bw()
}
comparisons <- c("Co - Ly", "Co - Hi", "Co - Lo", "Hi - Ly", "Hi - Lo", "Ly - Lo")
# comparisons <- c("Co - Sj", "Ly - Sj")
p_cut_off   <- 0.05
fold_change <- 1.2
i           <- 1
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
comparisons <- c("Co - Ly", "Co - Hi", "Co - Lo", "Hi - Ly", "Hi - Lo", "Ly - Lo")
# comparisons <- c("Co - Sj", "Ly - Sj")
p_cut_off   <- 0.05
fold_change <- 2
i           <- 1
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
require(ggplot2)
require(scales)
gg_volcano = function(unfiltered_toptable, afc=2, pval=0.05) {
# this function takes the unfiltered results of topTable (limma), and plots a
# ggplot2 Volcano Plot. Optional arguments are an absolute fold change and adj
# p-Value cutoff.
# add a pass/fail column, based on the afc and pval cutoffs
unfiltered_toptable$pass = unfiltered_toptable$adj.P.Val < pval & abs(unfiltered_toptable$logFC) > log2(afc)
# plot basics - x axis is lfc, y axis is -log10(pVal)
g = ggplot(unfiltered_toptable, aes(x=logFC, y=-log(adj.P.Val, 10)))
# add points and delimiter lines, colour according to pass/fail criteria
g + geom_point(aes(colour=pass), show_guide=F) + scale_colour_manual(values=c(alpha('black', 0.5), 'red')) +
geom_hline(yintercept=-log(pval, 10), colour="red", linetype=2) +
geom_vline(xintercept=-log2(afc), colour="red", linetype=2) +
geom_vline(xintercept=log2(afc), colour="red", linetype=2) +
theme_bw()
}
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
cat(comparisons[i])
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
length(gene_list_unfiltered$Name)
length(unique(gene_list_unfiltered$Name))
length(unique(gene_list_unfiltered$ID))
(unique(gene_list_unfiltered$ID))
data_in <- list()
data_in <- list()
for(i in 1:length(comparisons)) {
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
data_in[[i]] <- gene_list_unfiltered
cat(comparisons[i])
print(length(gene_list$logFC))
print(gene_list)
#   gene_list_unfiltered$threshold = as.factor(abs(gene_list_unfiltered$logFC) > log2(fold_change) &
#                                                gene_list_unfiltered$adj.P.Val < p_cut_off)
#   g = ggplot(data=gene_list_unfiltered, aes(x=gene_list_unfiltered$logFC,
#                                             y=-log10(gene_list_unfiltered$adj.P.Val),
#                                             colour=gene_list_unfiltered$threshold)) +
#     geom_point(alpha=0.4, size=1.75) +
#     theme(legend.position = "none") +
#     #xlim(c(-4, 4)) + ylim(c(0, 4.5)) +
#     xlab("log2 fold change") + ylab("-log10 Adj.P-value") +
#     ggtitle(paste("Volcano Plot of Fold Change vs Adj.P-Value", comparisons[i], sep=" "))
#   print(g)
print(gg_volcano(gene_list_unfiltered))
cat ("Press [enter] to continue")
line <- readline()
}
treatment_s        <- treatment
treatment_s[grep('Hi|Lo', treatment)] <- 'Sj'
array_names      <- treatment_s
treatments       <- c("Co", "Ly", "Sj")
# treatments       <- c("Co", "Ly", "Hi", "Lo")#
treatment_s        <- treatment
treatment_s[grep('Hi|Lo', treatment)] <- 'Sj'
array_names      <- treatment_s
treatments       <- c("Co", "Ly", "Sj")
# array_names      <- treatment_s
design           <- model.matrix(~0 + factor(array_names, levels = treatments))
colnames(design) <- treatments
num_parameters   <- ncol(design)
#cont_mat <- makeContrasts(Co-Ly, Co-Hi, Hi-Ly, levels=treatments)
cont_mat <- makeContrasts(Co-Sj, Ly-Sj,  levels=treatments)
idx      <- order(ndata.quantile$genes$Name)
ndata    <- ndata.quantile[idx,]
idx.rm   <- which(ndata$genes$probe.type=="Spike")
ndata    <- ndata[-idx.rm,]
## compute correlations between same probes on each chip
corfit   <- duplicateCorrelation(ndata, design, ndups=4,
weights=ndata$weights)
fit      <- lmFit(ndata, design, ndups=4, correlation=corfit$consensus)
fit2     <- contrasts.fit(fit, contrasts=cont_mat)
fit2     <- eBayes(fit2)
comparisons <- c("Co - Sj", "Ly - Sj")
i           <- 1
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
data_in[[7]] <- gene_list_unfiltered
cat(comparisons[i])
i           <- 2
gene_list            <- topTable(fit2, coef = comparisons[i], p.value = p_cut_off, lfc = log2(fold_change),
nrow(fit2$p.value), adjust.method = "BH")
gene_list_unfiltered <- topTable(fit2, coef = comparisons[i], number = nrow(fit2$p.value), adjust.method="BH")
data_in[[8]] <- gene_list_unfiltered
cat(comparisons[i])
save(data_in, file="deploy.Rdata")
setwd("../../../../../Web/html5up-helios/Analyses/Jess_Exiqon_2_Jun_2014/resources/shinyV/")
shiny::runApp('~/Documents/Bioinformatics/Web/Shiny/app4')
install.packages(ggzis)
install.packages("ggzis")
install.packages("ggvis")
install.packages("ggvis")
shiny::runApp('~/Documents/Bioinformatics/Web/Shiny/app4')
library(ggvis)
library(limma)
library(data.table)
library(ggvis)
load("deploy.Rdata")
shiny::runApp('~/Documents/Bioinformatics/Web/Shiny/app4')
shiny::runApp()
shiny::runApp()
library(shiny)
library(shinyIncubator)
library(ggvis)
library(shiny)
library(shinyIncubator)
require(ggplot2)
require(scales)
shiny::runApp()
shiny::runApp()
source("ggvolcano.R")
library(limma)
library(data.table)
library(ggvis)
load("deploy.Rdata")
