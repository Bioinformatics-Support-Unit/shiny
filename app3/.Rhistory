abline(h=1,lty=2)
total.var<-round(cumsum(matrix(unlist(pcaeigen)))*100,0)
par(new=TRUE)
plot(c(1:nrow(pcaeigen)),total.var,type="l",
lwd=2,xaxt="n",yaxt="n",lty=1,ylab="",xlab="")
abline(v=c(1:nrow(pcaeigen))[total.var>79][1],lty=2)
points(total.var,col="black",pch=21,bg="blue",cex=2)
axis(4)
mtext("Total % explained variance",side=4,line=3,col="blue")
axis(1,seq(1,nrow(pcaeigen),by=1))
#---------------------------------------------------------------
}
make.scree.plot.bar<-function(eigenvalues){
library(ggplot2)
library(reshape2)
check.get.packages("gridExtra")
.theme<- theme(
axis.line = element_line(colour = 'gray', size = .75),
panel.background = element_blank(),
plot.background = element_blank()
)
tmp<-data.frame(melt(eigenvalues$eigenvalue),PCs=rep(1:nrow(eigenvalues)))
tmp$value<-tmp$value*100
p1<-ggplot(tmp, aes(y=value, x = as.factor(PCs)))+geom_bar( fill="gray",stat="identity",position=position_dodge())+
.theme + geom_hline(yintercept=1,linetype=2) + ylab("% variance explained") + xlab("Principal Component")
#cumulative
eigenvalues$eigenvalues<-cumsum(eigenvalues$eigenvalues)
tmp<-data.frame(melt(eigenvalues),PCs=rep(1:nrow(eigenvalues)))
p2<-ggplot(tmp, aes(y=value, x = as.factor(PCs), fill=variable))+geom_bar( stat="identity",position=position_dodge())+
.theme + geom_hline(yintercept=.8,linetype=2) +xlab("Principal Component")
#multiple plot out put
grid.arrange(p1, p2, ncol=1)
}
plot.PCA<-function(pca,xaxis=1,yaxis=2, results = c("screeplot","scores","loadings","biplot"),group.bounds="ellipse",size=3,color=NULL, label=TRUE, legend.name =  NULL, font.size=5,alpha=.75,g.alpha=0.2,theme=NULL, point.labels=NULL,extra=NULL,...){
library(ggplot2)
library(reshape2)
library(grid) # arrows
#results<-match.args(results) #
local<-switch(results[1],
"screeplot" 	= function(pca,...){make.scree.plot.bar(pca$pca.eigenvalues)},
"scores"		= function(pca,color,size,...){
obj<-pca$pca.scores[,c(xaxis,yaxis)]
tmp<-data.frame(obj,id = rownames(obj))
#plot
if(is.null(theme)){
.theme2<- theme(
axis.line = element_line(colour = 'gray', size = .75),
panel.background = element_blank(),
plot.background = element_blank(),
legend.background=element_rect(fill='white'),
legend.key = element_blank()
)
} else {.theme2<-theme}
if(is.null(color)){
tmp$color<-"gray"
}else{
tmp$color<-as.factor(color[,])
if(is.null(legend.name)){legend.name<-colnames(color)}
}
points<-if(all(tmp$color=="gray")) {
geom_point(color="gray",size=size,alpha=alpha,show_guide = FALSE)
} else {
geom_point(aes(color=color),size=size,alpha=alpha)
}
#labels
tmp$lab.offset<-tmp[,2]-abs(range(obj[,2])[1]-range(obj[,2])[2])/50
labels<-if(label==TRUE){
if(is.null(point.labels)){
geom_text(size=font.size,aes_string(x=colnames(tmp)[1], y="lab.offset",label="id"),color="black",show_guide = FALSE)
} else {
tmp$custom.label<-point.labels
geom_text(size=font.size,aes_string(x=colnames(tmp)[1], y="lab.offset",label="custom.label"),color="black",show_guide = FALSE)
}
} else { NULL }
#grouping visualizations
polygons<-NULL
#Hoettellings T2 ellipse
if(group.bounds=="ellipse"){
ell<-get.ellipse.coords(cbind(obj[,1],obj[,2]), group=tmp$color)# group visualization via
polygons<-if(is.null(color)){
geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=g.alpha, show_guide = FALSE)
} else {
geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y, fill=group),linetype=2,alpha=g.alpha, show_guide = FALSE)
}
}
#convex hull
if(group.bounds=="polygon"){
ell<-get.polygon.coords(data.frame(cbind(obj[,1],obj[,2])),tmp$color)# group visualization via
polygons<-if(is.null(color)){
geom_polygon(data=data.frame(ell),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=g.alpha, show_guide = FALSE)
} else {
geom_polygon(data=data.frame(ell),aes(x=x,y=y, fill=group),linetype=2,alpha=g.alpha, show_guide = FALSE)
}
}
#making the actual plot
p<-ggplot(data=tmp,aes_string(x=colnames(tmp)[1], y=colnames(tmp)[2])) +
geom_vline(xintercept = 0,linetype=2, size=.5, alpha=.5) +
geom_hline(yintercept = 0,linetype=2, size=.5, alpha=.5) +
polygons +
points +
labels +
.theme2 +
scale_x_continuous(paste(colnames(tmp)[1],sprintf("(%s%%)", round(pca$pca.eigenvalues[xaxis,1],digits=2)*100),sep=" "))+
scale_y_continuous(paste(colnames(tmp)[2],sprintf("(%s%%)", round(pca$pca.eigenvalues[yaxis,1],digits=2)*100),sep=" "))
if(!is.null(legend.name)) {p<-p+scale_colour_discrete(name = legend.name)}
p<-p+extra
print(p)
},
"loadings"		= function(pca,color,size,...){
obj<-pca$pca.loadings[,c(xaxis,yaxis)]
tmp<-data.frame(obj,id = rownames(obj))
#plot
if(is.null(theme)){
.theme2<- theme(
axis.line = element_line(colour = 'gray', size = .75),
panel.background = element_blank(),
plot.background = element_blank(),
legend.background=element_rect(fill='white'),
legend.key = element_blank()
)
} else {.theme2<-theme}
if(is.null(color)){
tmp$color<-"gray"
}else{
tmp$color<-as.factor(color[,])
if(is.null(legend.name)){legend.name<-colnames(color)}
}
points<-if(all(tmp$color=="gray")) {
geom_point(color="gray",size=size,alpha=alpha,show_guide = FALSE)
} else {
geom_point(aes(color=color),size=size,alpha=alpha)
}
#labels
tmp$lab.offset<-tmp[,2]-abs(range(obj[,2])[1]-range(obj[,2])[2])/50
labels<-if(label==TRUE){geom_text(size=font.size,aes_string(x=colnames(tmp)[1], y="lab.offset",label="id"),color="black",show_guide = FALSE)} else { NULL }
#grouping visualizations
polygons<-NULL
#Hoettellings T2 ellipse
if(group.bounds=="ellipse"){
ell<-get.ellipse.coords(cbind(obj[,1],obj[,2]), group=tmp$color)# group visualization via
polygons<-if(is.null(color)){
geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=g.alpha, show_guide = FALSE)
} else {
geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y, fill=group),linetype=2,alpha=g.alpha, show_guide = FALSE)
}
}
#convex hull
if(group.bounds=="polygon"){
ell<-get.polygon.coords(data.frame(cbind(obj[,1],obj[,2])),tmp$color)# group visualization via
polygons<-if(is.null(color)){
geom_polygon(data=data.frame(ell),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=g.alpha, show_guide = FALSE)
} else {
geom_polygon(data=data.frame(ell),aes(x=x,y=y, fill=group),linetype=2,alpha=g.alpha, show_guide = FALSE)
}
}
#making the actual plot
p<-ggplot(data=tmp,aes_string(x=colnames(tmp)[1], y=colnames(tmp)[2])) +
geom_vline(xintercept = 0,linetype=2, size=.5, alpha=.5) +
geom_hline(yintercept = 0,linetype=2, size=.5, alpha=.5) +
points +
.theme2 +
labels +
polygons +
scale_x_continuous(paste(colnames(tmp)[1],sprintf("(%s%%)", round(pca$pca.eigenvalues[xaxis,1],digits=2)*100),sep=" "))+
scale_y_continuous(paste(colnames(tmp)[2],sprintf("(%s%%)", round(pca$pca.eigenvalues[yaxis,1],digits=2)*100),sep=" "))
if(!is.null(legend.name)) {p<-p+scale_colour_discrete(name = legend.name)}
print(p)
},
"biplot"		= function(pca,...){
#rescaling based on: http://cran.r-project.org/doc/contrib/Lemon-kickstart/rescale.R
rescale<-function(x,newrange) {
if(nargs() > 1 && is.numeric(x) && is.numeric(newrange)) {
# if newrange has max first, reverse it
if(newrange[1] > newrange[2]) {
newmin<-newrange[2]
newrange[2]<-newrange[1]
newrange[1]<-newmin
}
xrange<-range(x)
if(xrange[1] == xrange[2]) stop("can't rescale a constant vector!")
mfac<-(newrange[2]-newrange[1])/(xrange[2]-xrange[1])
invisible(newrange[1]+(x-xrange[1])*mfac)
}
else {
cat("Usage: rescale(x,newrange)\n")
cat("\twhere x is a numeric object and newrange is the min and max of the new range\n")
}
}
if(is.null(theme)){
.theme2<- theme(
axis.line = element_line(colour = 'gray', size = .75),
panel.background = element_blank(),
plot.background = element_blank()
)
} else {.theme2<-theme}
#based on https://groups.google.com/forum/#!topic/ggplot2/X-o2VXjDkQ8
scores<-pca$pca.scores[,c(xaxis,yaxis)]
loadings<-tmp.loadings<-pca$pca.loadings[,c(xaxis,yaxis)]
tmp.loadings[,1]<-rescale(loadings[,1], range(scores[,1]))
tmp.loadings[,2]<-rescale(loadings[,2], range(scores[,2]))
tmp.loadings<-data.frame(tmp.loadings,label=rownames(loadings))
#Adding grouping visualizations
tmp<-scores[,1:2]
if(is.null(color)){
tmp$color<-"gray"
}else{
tmp$color<-as.factor(color[,])
if(is.null(legend.name)){legend.name<-colnames(color)}
}
#grouping visualizations
polygons<-NULL
#Hoettellings T2 ellipse
if(group.bounds=="ellipse"){
ell<-get.ellipse.coords(cbind(tmp[,1],tmp[,2]), group=tmp$color)# group visualization via
polygons<-if(is.null(color)){
geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=g.alpha, show_guide = FALSE)
} else {
geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y, fill=group),linetype=2,alpha=g.alpha, show_guide = FALSE)
}
}
#convex hull
if(group.bounds=="polygon"){
ell<-get.polygon.coords(cbind(tmp[,1],tmp[,2]),tmp$color)# group visualization via
polygons<-if(is.null(color)){
geom_polygon(data=data.frame(ell),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=g.alpha, show_guide = FALSE)
} else {
geom_polygon(data=data.frame(ell),aes(x=x,y=y, fill=group),linetype=2,alpha=g.alpha, show_guide = FALSE)
}
}
# ell<-get.ellipse.coords(cbind(tmp[,1],tmp[,2]), group=tmp$color)# group visualization via
# polygons<-if(is.null(color)){
# geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y), fill="gray", color="gray",linetype=2,alpha=.1, show_guide = FALSE)
# } else {
# geom_polygon(data=data.frame(ell$coords),aes(x=x,y=y, fill=group),linetype=2,alpha=.1, show_guide = FALSE)
# }
points<-if(all(tmp$color=="gray")) {
geom_point(data=tmp,aes_string(x=colnames(tmp)[1], y=colnames(tmp)[2]),color="gray",size=size,alpha=alpha,show_guide = FALSE)
} else {
geom_point(data=tmp, aes_string(x=colnames(tmp)[1], y=colnames(tmp)[2],color="color"),size=size,alpha=alpha)
}
p<-ggplot()+
points +
polygons+
geom_segment(data=tmp.loadings, aes_string(x=0, y=0, xend=colnames(tmp.loadings)[1], yend=colnames(tmp.loadings)[2]), arrow=arrow(length=unit(0.05,"cm")), alpha=0.25)+
geom_text(data=tmp.loadings, aes_string(x=colnames(tmp.loadings)[1], y=colnames(tmp.loadings)[2], label="label"), alpha=0.5, size=font.size)+
scale_colour_discrete("Variety")+
scale_x_continuous(paste(colnames(tmp)[1],sprintf("(%s%%)", round(pca$pca.eigenvalues[xaxis,1],digits=2)*100),sep=" "))+
scale_y_continuous(paste(colnames(tmp)[2],sprintf("(%s%%)", round(pca$pca.eigenvalues[yaxis,1],digits=2)*100),sep=" ")) +
.theme2
if(!is.null(legend.name)) {p<-p+scale_colour_discrete(name = legend.name)}
print(p)
}
)
local(pca=pca,color=color,size=size,alpha=alpha,group.bounds=group.bounds,...)
}
test<-function(){
data(mtcars)
data<-mtcars
tmp<-list()
tmp$pca.algorithm<-"svd"
tmp$pca.components<-2
tmp$pca.center<-TRUE
tmp$pca.scaling<-"uv"
tmp$pca.data<-data
pca.inputs<-tmp
res<-devium.pca.calculate(pca.inputs,return="list",plot=FALSE)
results<-"biplot"#"biplot"#"scores","loadings","biplot")"screeplot"
color<-data.frame(am=mtcars$am,vs=mtcars$vs)#NULL#data.frame(am=mtcars$am)
color<-data.frame(color=join.columns(color))
color=NULL
xaxis<-1
yaxis=2
group.bounds="polygon"
plot.PCA(pca=res,results=results,yaxis=yaxis,xaxis=xaxis,size=1,color=color, label=TRUE, legend.name =  NULL,font.size=.1,group.bounds,alpha=.75)
}
runApp(".")
setwd("~/Documents/Bioinformatics/Customers/Jess/May_2014_Exiqon_miRNA_Microarray/Raw_Data/Array_2/")
#make.gal.env(galname='galenv', gal.path='.')
#ebatch <- ReadExi(galname='galenv', txtfile.path='.')
###Array_1
# treatment <- c("Co", "Co", "Co", "Co", "Co", "Co", "Co", "Co", "Co", "Co", "Co", "Co", "Ly", "Ly", "Ly", "Ly",
#                "Ly", "Ly", "Ly", "Ly", "Ly", "Ly", "Ly", "Ly", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi", "Hi")
###Array_2
treatment <- c("Co", "Ly", "Lo", "Lo", "Lo", "Ly", "Hi", "Lo", "Hi", "Hi", "Lo", "Hi", "Hi", "Co", "Lo",
"Ly", "Ly", "Ly", "Co", "Lo", "Hi", "Hi", "Co", "Ly", "Lo", "Co", "Ly", "Co", "Ly", "Co",
"Hi", "Co", "Co", "Lo", "Hi", "Ly")
treatment <- treatment[-23]
targets        <- readTargets(path = "./" )
RGList         <- read.maimages(targets[,c("Cy3", "Cy5")], source = "imagene", path = "./" )
RGList$genes   <- readGAL(path = "./")
RGList$printer <- getLayout(RGList$genes)
obatch <- createAB(RGList)
spikein.all <- grep('^spike', featureNames(obatch), value=TRUE)
spikein.subset <- setdiff(spikein.all, 'spike_control_f')
eset.spike <- NormiR(obatch, bg.correct=FALSE,
normalize.method='spikein',
normalize.param=list(probeset.list=spikein.subset, figures.show=TRUE, figures.output="file"),
summary.method='medianpolish')
treatments       <- c("Co", "Ly", "Hi")
array_names      <- treatment
# treatments       <- c("Co", "Ly", "Sj")
# array_names      <- treatment_s
design           <- model.matrix(~0 + factor(array_names, levels = treatments))
colnames(design) <- treatments
num_parameters   <- ncol(design)
fit              <- lmFit(eset.spike[,1:35], design)
cont_mat <- makeContrasts(Co-Ly, Co-Hi, Hi-Ly, levels=treatments)
#cont_mat <- makeContrasts(Co-Sj, Ly-Sj,  levels=treatments)
fit2 <- contrasts.fit(fit, contrasts=cont_mat)
fit2 <- eBayes(fit2)
design
length(array_names)
fit              <- lmFit(eset.spike[,1:35], design)
fit              <- lmFit(as.matrix(eset.spike[,1:35]), design)
array_names
treatments       <- c("Co", "Ly", "Hi")
array_names      <- treatment
# treatments       <- c("Co", "Ly", "Sj")
# array_names      <- treatment_s
design           <- model.matrix(~0 + factor(array_names, levels = treatments))
colnames(design) <- treatments
num_parameters   <- ncol(design)
fit              <- lmFit(eset.spike[,1:35], design)
fit              <- lmFit(as.matrix(eset.spike)[,1:35], design)
eset.spike
eset.spike[,1:35]
design
treatment
length(treatment)
treatments       <- c("Co", "Ly", "Hi", "Lo")
array_names      <- treatment
# treatments       <- c("Co", "Ly", "Sj")
# array_names      <- treatment_s
design           <- model.matrix(~0 + factor(array_names, levels = treatments))
colnames(design) <- treatments
num_parameters   <- ncol(design)
fit              <- lmFit(eset.spike[,1:35], design)
cont_matrix <- makeContrasts(Co-Ly, Co-Hi, Co-Lo, Hi-Ly, Ly-Lo, Hi-Lo, levels=treatments)
fit2 <- contrasts.fit(fit, contrasts=cont_mat)
fit2 <- eBayes(fit2)
cont_mat <- makeContrasts(Co-Ly, Co-Hi, Co-Lo, Hi-Ly, Ly-Lo, Hi-Lo, levels=treatments)
fit2 <- contrasts.fit(fit, contrasts=cont_mat)
fit2 <- eBayes(fit2)
getwd()
setwd("~/Documents/Bioinformatics/Web/Shiny/app3/")
runApp(".")
runApp(".")
runApp(".")
source("profile_plot.R")
load("test.Rdata")
load("post_qc.Rdata")
library(affycoretools)
data_in <- list()
data_in[[1]] <- obatch
data_in[[2]] <- eset.spike
data_in[[3]] <- as.matrix(eset.spike.qc[,1:35])
treatment_in <- list()
treatment_in[[1]] <- treatment
treatment_in[[2]] <- treatment
treatment_in[[3]] <- treatment_2
data_names <- c('Raw Data', 'Normalised Data - Pre QC', 'Normalised Data - Post QC')
plotPCA(data_in[[1]])
plotPCA(data_in[[2]])
plotPCA(data_in[[3]])
values <- data.frame
values <- data.frame()
values$df <- data_in[[1]]
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
shiny::runApp()
foo <- data_in[[2]]
foo
colnames(foo)
foo_names <- colnames(foo)
foo_names_b <- foo_names[-3:5]
foo_names_b <- foo_names[-c(3:5)]
length(foo_names)
length(foo_names_b)
foo[,colnames(foo) == foo_names_b]
foo[, foo_names_b %in% colnames(foo)]
foo_out <- foo[, foo_names_b %in% colnames(foo)]
length(colnames(foo_out))
foo_out <- foo[, colnames(foo) %in% foo_names_b]
length(colnames(foo_out))
shiny::runApp()
shiny::runApp()
plotPCA(foo_out)
shiny::runApp()
shiny::runApp()
shiny::runApp()
grep('abc', treatment)
blah <- grep('abc', treatment)
df <- data_in[[2]]
foo <- colnames(df)
fooB <- df[,-c(4-5)]
df <- data_in[[2]]
foo <- colnames(df)
fooB <- df[,-c(4-5)]
tmp <- c()
for(i in 1:length(colnames(df))) {
tmp<-c(tmp,grep(colnames(df)[i], colnames(fooB)))
}
tmp
df <- data_in[[2]]
foo <- colnames(df)
fooB <- df[,-c(4-5)]
tmp <- c()
for(i in 1:length(colnames(fooB))) {
tmp<-c(tmp,grep(colnames(df)[i], colnames(fooB)))
}
source("profile_plot.R")
load("test.Rdata")
load("post_qc.Rdata")
library(affycoretools)
data_in <- list()
data_in[[1]] <- obatch
data_in[[2]] <- eset.spike
data_in[[3]] <- as.matrix(eset.spike.qc[,1:35])
treatment_in <- list()
treatment_in[[1]] <- treatment
treatment_in[[2]] <- treatment
treatment_in[[3]] <- treatment_2
data_names <- c('Raw Data', 'Normalised Data - Pre QC', 'Normalised Data - Post QC')
df <- data_in[[2]]
foo <- colnames(df)
fooB <- df[,-c(4-5)]
tmp <- c()
for(i in 1:length(colnames(fooB))) {
tmp<-c(tmp,grep(colnames(df)[i], colnames(fooB)))
}
colnames(df)
fooB
colnames(fooB)
df[,-c(4-5)]
fooB <- df[1:10,-c(4-5)]
fooB
df
df[1:10]
df[1:10,]
df[1:10,-c(1:2)]
foo <- df[1:10,-c(1:2)]
colnames(foo)
df <- data_in[[2]]
foo <- colnames(df)
fooB <- df[1:10,-c(4:5)]
tmp <- c()
for(i in 1:length(colnames(fooB))) {
tmp<-c(tmp,grep(colnames(df)[i], colnames(fooB)))
}
tmp
tmp <- c()
for(i in 1:length(colnames(fooB))) {
tmp<-c(tmp,grep(colnames(fooB)[i], colnames(df)))
}
tmp
length(tmp)
length(colnames(df))
shiny::runApp()
shiny::runApp()
shiny::runApp()
df <- data_in[[2]]
df2 <- data_in[[2]]
df2 <- df2[,-c(4:7)]
treatment <- treatment_in[[2]]
tmp <- c()
for(i in 1:length(colnames(df2))) {
tmp<-c(tmp,grep(colnames(df)[i], colnames(df2)))
}
tment <- treatment[tmp]
tment
length(tment)
colnames(df)
treatment_in[[2]]
colnames(df2)
tment
tmp
df <- data_in[[2]]
df2 <- data_in[[2]]
df2 <- df2[,-c(4:7)]
treatment <- treatment_in[[2]]
tmp <- c()
for(i in 1:length(colnames(df2))) {
tmp<-c(tmp,grep(colnames(df2)[i], colnames(df)))
}
tment <- treatment[tmp]
tmp
df <- data_in[[2]]
df2 <- data_in[[2]]
df2 <- df2[,-c(4:7)]
treatment <- treatment_in[[2]]
tmp <- c()
for(i in 1:length(colnames(df))) {
tmp<-c(tmp,grep(colnames(df2)[i], colnames(df)))
}
tment <- treatment[tmp]
tmp
length(colnames(df))
df <- data_in[[2]]
df2 <- data_in[[2]]
df2 <- df2[,-c(4:7)]
treatment <- treatment_in[[2]]
tmp <- c()
for(i in 1:length(colnames(df))) {
tmp<-c(tmp,grep(colnames(df2)[i], colnames(df)))
}
tment <- treatment[tmp]
tmp
length(colnames(df))
